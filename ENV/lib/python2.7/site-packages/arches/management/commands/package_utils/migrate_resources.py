import os
import sys
import traceback
import unicodecsv
from os import listdir
from os.path import isfile, join
import arches.app.models.models as models
from arches.app.models.entity import Entity
from arches.app.models.resource import Resource

import logging

# Script for migrating business data from one part of resource graph to elsewhere.
# Typically this will be part of a migration from one resource graph to another, after adding new parts from the new resource graph, but before removing old ones.
# The migration is carried out according to a csv which specifies which entities must be created or altered.


def migrate(settings=None):
    
    # Load csv files
    # parse csv file
    
    if not settings:
        from django.conf import settings
    
    suffix = '_altered_nodes.csv'
    errors = []
    
    for path in settings.ADDITIONAL_RESOURCE_GRAPH_LOCATIONS:
        if os.path.exists(path):
            print '\nLOADING NODE MIGRATION INFO (%s)' % (path)
            print '--------------'
            for f in listdir(path):
                if isfile(join(path, f)) and f.endswith(suffix):
                    path_to_file = join(path,f)
                    basepath = path_to_file[:-18]
                    name = basepath.split(os.sep)[-1]
                    
                    migrations = get_list_dict(basepath + '_altered_nodes.csv', ['OLDENTITYTYPEID', 'NEWENTITYTYPEID'])
                
                    # Identify nodes which must be migrated
                    resource_entity_type = 'HERITAGE_RESOURCE_GROUP.E27'
                    mapping_schema = Entity.get_mapping_schema(resource_entity_type)
                        
                    for migration in migrations:
                        # For each node to be migrated
                        node_id = migration['OLDENTITYTYPEID']
                        logging.warning('Migrating entities of type: %s', node_id)
                        
                        # Find affected entities
                        entities = models.Entities.objects.all().filter(entitytypeid=node_id)
                        # logging.warning('Found entities: %s', entities)
                        
                        
                        new_type_id = migration['NEWENTITYTYPEID']
                        
                        for resource_entity in entities:
                            # create a new entity with the value taken from the old type
                            
                            # load the original entity from the database
                            original_entity = Entity(resource_entity.pk)
                            
                            # Find the full resource the source entity came from
                            # Trace back through entity relations until we arrive the root type
                            parent = resource_entity
                            try:
                                while parent.entitytypeid.pk != resource_entity_type:
                                    relationship = models.Relations.objects.all().get(entityidrange=parent.entityid)
                                    parent = relationship.entityiddomain
                                    
                                # Load the full root resource
                                parent_resource = Resource(parent.pk)
                                
                                parent_resource.set_entity_value(new_type_id, original_entity.value)
                                parent_resource.save()
                                
                            except:
                                logging.warning("Couldn't migrate this entity")
                        
                        #TODO create observed property nodes during this migration
        
        
    
def get_list_dict(pathtofile, fieldnames):
    """
    Gets a list of dictionaries from a csv file

    """

    ret = []
    with open(pathtofile, 'rU') as f:
        rows = unicodecsv.DictReader(f, fieldnames=fieldnames, 
            encoding='utf-8-sig', delimiter=',', restkey='ADDITIONAL', restval='MISSING')
        rows.next() # skip header row
        for row in rows:  
            ret.append(row)
    return ret