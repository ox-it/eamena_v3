import os
import sys
import traceback
import unicodecsv
from os import listdir
from os.path import isfile, join
import arches.app.models.models as models

import logging

# Script for migrating business data from one part of resource graph to elsewhere.
# Typically this will be part of a migration from one resource graph to another, after adding new parts from the new resource graph, but before removing old ones.
# The migration is carried out according to a csv which specifies which entities must be created or altered.


def migrate(settings=None):
    
    # Load csv files
    # parse csv file
    
    if not settings:
        from django.conf import settings
    
    suffix = '_altered_nodes.csv'
    errors = []
    
    for path in settings.ADDITIONAL_RESOURCE_GRAPH_LOCATIONS:
        if os.path.exists(path):
            print '\nLOADING NODE MIGRATION INFO (%s)' % (path)
            print '--------------'
            for f in listdir(path):
                logging.warning("checking file %s", f)
                if isfile(join(path, f)) and f.endswith(suffix):
                    path_to_file = join(path,f)
                    basepath = path_to_file[:-18]
                    name = basepath.split(os.sep)[-1]
                    
                    migrations = get_list_dict(basepath + '_altered_nodes.csv', ['OLDENTITYTYPEID', 'NEWENTITYTYPEID'])
                
                    # Identify nodes which must be migrated
                        
                    for migration in migrations:
                        # For each node to be migrated
                        node_id = migration['OLDENTITYTYPEID']
                        logging.warning('Migrating entities of type: %s', node_id)
                        
                        # Find affected entities
                        entity_type = models.Entities.objects.all().filter(entitytypeid=node_id)
                        logging.warning('Found entities: %s', entity_type)
                        
                        # entities = models.Entities.objects.all().filter(entitytypeid=entity_type.id)
                        # logging.warning('Found entities: %s', entities)
                        # Mutate entity into a different entitytype
                        # Work back along the chain of mappings to root
                        # Mutate relationships if necessary
                        # Create and link intermedate nodes if necessary
                        
                        
                        # Find existing old nodes
                        # Create new node, taking value from old node
                        # Delete old node? Or do this later when cleaning up the schema
                        
                        
                        
                        #TODO create observed property nodes during this migration
        
        
    
def get_list_dict(pathtofile, fieldnames):
    """
    Gets a list of dictionaries from a csv file

    """

    ret = []
    with open(pathtofile, 'rU') as f:
        rows = unicodecsv.DictReader(f, fieldnames=fieldnames, 
            encoding='utf-8-sig', delimiter=',', restkey='ADDITIONAL', restval='MISSING')
        rows.next() # skip header row
        for row in rows:  
            ret.append(row)
    return ret